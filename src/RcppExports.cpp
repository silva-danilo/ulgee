// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// prod_1
Eigen::VectorXd prod_1(const Eigen::MatrixXd M, Eigen::VectorXd m);
RcppExport SEXP _ulgee_prod_1(SEXP MSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type M(MSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(prod_1(M, m));
    return rcpp_result_gen;
END_RCPP
}
// prod_2
Eigen::MatrixXd prod_2(const Eigen::MatrixXd R, Eigen::VectorXd sigma, Eigen::VectorXd D);
RcppExport SEXP _ulgee_prod_2(SEXP RSEXP, SEXP sigmaSEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type R(RSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(prod_2(R, sigma, D));
    return rcpp_result_gen;
END_RCPP
}
// prod_3
Eigen::MatrixXd prod_3(const Eigen::MatrixXd X, Eigen::MatrixXd W);
RcppExport SEXP _ulgee_prod_3(SEXP XSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(prod_3(X, W));
    return rcpp_result_gen;
END_RCPP
}
// prod_4
Eigen::VectorXd prod_4(const Eigen::MatrixXd S1, Eigen::VectorXd s2);
RcppExport SEXP _ulgee_prod_4(SEXP S1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type S1(S1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(prod_4(S1, s2));
    return rcpp_result_gen;
END_RCPP
}
// prod_5
Eigen::MatrixXd prod_5(const Eigen::MatrixXd S1, Eigen::MatrixXd S3);
RcppExport SEXP _ulgee_prod_5(SEXP S1SEXP, SEXP S3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type S1(S1SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type S3(S3SEXP);
    rcpp_result_gen = Rcpp::wrap(prod_5(S1, S3));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ulgee_prod_1", (DL_FUNC) &_ulgee_prod_1, 2},
    {"_ulgee_prod_2", (DL_FUNC) &_ulgee_prod_2, 3},
    {"_ulgee_prod_3", (DL_FUNC) &_ulgee_prod_3, 2},
    {"_ulgee_prod_4", (DL_FUNC) &_ulgee_prod_4, 2},
    {"_ulgee_prod_5", (DL_FUNC) &_ulgee_prod_5, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_ulgee(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
